#!/usr/bin/env python3
"""
Pull items from a Zotero collection and generate a numbered, MLA-style
bibliography in Markdown format.
"""
import os
import sys

from dotenv import load_dotenv
from pyzotero import zotero
from pyzotero.zotero_errors import PyZoteroError


def main():
    # Load environment variables from .env
    load_dotenv()

    api_key = os.getenv("ZOTERO_API_KEY")
    user_id = os.getenv("ZOTERO_USER_ID")
    collection_key = os.getenv("ZOTERO_COLLECTION_KEY")

    # Validate required settings
    missing = [name for name, val in (
        ("ZOTERO_API_KEY", api_key),
        ("ZOTERO_USER_ID", user_id),
        ("ZOTERO_COLLECTION_KEY", collection_key),
    ) if not val]
    if missing:
        sys.exit(f"Error: Missing environment variables: {', '.join(missing)}")

    if not user_id.isdigit():
        sys.exit(f"Error: ZOTERO_USER_ID must be numeric, got '{user_id}'")

    # Initialize Zotero client
    client = zotero.Zotero(user_id, "user", api_key)

    # Fetch all items in the collection
    try:
        items = client.everything(client.collection_items(collection_key))
    except PyZoteroError as e:
        sys.exit(f"Error fetching Zotero items: {e}")

    # Format bibliography entries
    bibliography = format_citations(items)

    # Write to Markdown file
    out_path = os.path.join("docs", "pedagogy", "bibliography.md")
    os.makedirs(os.path.dirname(out_path), exist_ok=True)
    with open(out_path, "w", encoding="utf-8") as f:
        f.write("<!-- This file is generated by scripts/build_bibliography.py. Do not edit. -->\n\n")
        f.write("# Bibliography\n\n")
        f.write(bibliography)
        f.write("\n")

    print(f"Bibliography successfully generated and saved to {out_path}")


def format_citations(items):
    """
    Convert Zotero items into a numbered list of MLA-style citations
    with Markdown italics for titles.
    """
    citations = []
    for idx, item in enumerate(items, start=1):
        data = item.get("data", {})

        # Authors/creators
        creators = data.get("creators", [])
        authors = []
        for creator in creators:
            last = creator.get("lastName", "")
            first = creator.get("firstName", "")
            if last and first:
                authors.append(f"{last}, {first}")
            elif last:
                authors.append(last)
            elif creator.get("name"):
                authors.append(creator["name"])
        if len(authors) > 1:
            authors_str = ", ".join(authors[:-1]) + ", and " + authors[-1]
        else:
            authors_str = authors[0] if authors else ""

        # Title
        title = data.get("title") or data.get("publicationTitle") or "Untitled"
        title_md = f"*{title}*"

        # Publisher and date
        publisher = data.get("publisher", "")
        date = data.get("date", "")

        # Assemble parts per MLA style
        parts = []
        if authors_str:
            parts.append(f"{authors_str}.")
        parts.append(f"{title_md}.")
        if publisher and date:
            parts.append(f"{publisher}, {date}.")
        elif publisher:
            parts.append(f"{publisher}.")
        elif date:
            parts.append(f"{date}.")

        citation = " ".join(parts)
        citations.append(f"{idx}. {citation}")

    return "\n".join(citations)


if __name__ == "__main__":
    main()